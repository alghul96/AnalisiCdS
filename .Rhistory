library(epicalc)
?Foreign
??foreign
setwd("~/GitHub/AnalisiCdS")
Dataset <- read.dta("renal_failure.dta")
use(Dataset)
des()
str()
str(Dataset)
View(Dataset)
ren_fail <- factor (ren_fail, labels = c("ren.fail absent ", "ren.fail present"))
diabetes <- factor (diabetes, labels = c("diabetes absent", "diabetes present"))
diabetes
View(Dataset)
ren_fail
table0.pyears <-sum(p_years)
table0.pyears
table0.ric <- sum(cv_hosp)
View(Dataset)
table0.ric <- sum(cv_hosp)
table0.inc1000 <- table0.ric/table0.pyears*1000; table0.inc1000
model0 <- glm(cv_hosp~1, offset=log(p_years), family=poisson)
coeff <- t(t(coef(model0))); coeff
summary(model0)
coeff.95ci <- cbind(coeff, t(confint(model0)))
coeff.95ci
IDR.95ci <- round(exp(coeff.95ci),3)*1000;IDR.95ci
table1.inc1000 <- table1.ric/table1.pyears*1000;table1.inc1000
# estimate incidence rate for each level of  ren.fail
table1.pyears <-tapply(p_years, list( ren_fail), sum)
table1.ric <- tapply(cv_hosp, list(ren_fail), sum)
table1.inc1000 <- table1.ric/table1.pyears*1000;table1.inc1000
table1.ric
table1.pyears
?tapply
list( ren_fail)
cv_hosp
list(ren_fail)
table1.inc1000
model1<-glm(cv_hosp ~ ren_fail, offset=log(p_years), family=poisson)
summary(model1)
raterenfabs = exp(-3.66996) * 1000
raterenfabs
raterenfpres = exp(-3.66996 + 1.26903) * 1000
raterenfabs
raterenfpres
idr.display(model1)
ibrary(epicalc)
library(foreign)
library(epicalc)
setwd("~/GitHub/AnalisiCdS")
whas <- read.dta("R:\\Miglio\\biostatistics 2016\\lab 12th may\\whas2.dta",
convert.dates=TRUE, convert.factors=TRUE, missing.type=TRUE,
convert.underscore=TRUE, warn.missing.labels=TRUE)
whas <- read.dta("whas2.dta",
convert.dates=TRUE, convert.factors=TRUE, missing.type=TRUE,
convert.underscore=TRUE, warn.missing.labels=TRUE)
View(whas)
use(whas)
des()
summ()
hist(whas$cpk)
hist(log(whas$cpk))
library(survival)
?Surv
msurv<- Surv(lenfol, fstat == "Dead")
msurv
?survfit
options(survfit.print.mean = TRUE)
mfit
mfit <- survfit((msurv)~1)
options(survfit.print.mean = TRUE)
mfit
summary(mfit)
plot(mfit)
my.fit <- summary(mfit) #questo oggetto vciene creato dal summary di mfit contiene l'elemento surv
my.fit$surv
length(H.hat)
H.hat <- -log(my.fit$surv); # che ? proprio lo stimatore della funzione di kaplan mayer
H.hat[length(H.hat)]
length(H.hat)
H.hat <- c(H.hat, H.hat[length(H.hat)]) # a questo oggetto si aggiunge un ulteriore elemento per rappresentarlo graficamrente
plot(c(my.fit$time, my.fit$time[length(my.fit$time)]+1),H.hat,type="s") # e quindi si plotta
plot(mfit, fun="cumhaz") #oppure questa ? la funzione automatica
plot(mfit)
plot(mfit, fun="cumhaz") #oppure questa ? la funzione automatica
plot(mfit, fun="cloglog")
mfit.bymiord<-survfit((msurv)~miord)
plot(mfit.bymiord)
plot(mfit.bymiord, conf.int = TRUE, col = c("black", "red"), lty = 1:2)
legend(locator(1), legend=c("First","Recurrent"), lty=1:2)
# nell'output ? possibile vedere che il secondo intervallo di confidenza non viene riportato
plot(mfit.bymiord)
# in questo grafico vediamo la stima delle due curve, una con miord recurrent e l'altra meno
# la differenza tra le due curve comunque si nota!
# with confidence band
plot(mfit.bymiord, conf.int = TRUE, col = c("black", "red"), lty = 1:2)
legend(locator(1), legend=c("First","Recurrent"), lty=1:2)
# vediamo che in questo grafico la curva nera ? quella del gruppo di coloro che sono
# al primo infarto, mentre quella in rosso ? la sopravvivenza stimata di coloro che sono al
# secondo o ad un superiore infarto
legend(locator(1), legend=c("First","Recurrent"), lty=1:2)
plot(mfit.bymiord, fun="cloglog", col = c("black", "red"),
lty = 1:2)
mfit.bymitype<-survfit((msurv)~mitype)
plot(mfit.bymitype)
plot(mfit.bymitype, conf.int = TRUE, col = c("black", "red"), lty = 1:2)
legend(locator(1), legend=c("Q-wave","non-Q-wave"), lty=1:2)
plot(mfit.bymitype, fun="cloglog", col = c("black", "red"),
lty = 1:2)
cox.bymiord<-coxph(msurv ~ miord , iter.max=20)
cox.bymitype<-coxph(msurv ~ mitype , iter.max=20)
cox.bysex<-coxph(msurv ~ sex, iter.max=20)
summary(cox.bymiord)
summary(cox.bymitype)
summary(cox.bysex)
cox.comp <- coxph(msurv ~ factor(agecl) + miord+mitype + chf+sho+sex+factor(cpkcl), iter.max=12)
r <- resid(cox.comp, "scaledsch")
cox.comp
r
plot(cox.zph(cox.comp))    # invokes plot.cox.zph
plot(c(my.fit$time, my.fit$time[length(my.fit$time)]+1),H.hat,type="s") # e quindi si plotta
plot(mfit, fun="cumhaz") #oppure questa ? la funzione automatica
my.fit <- summary(mfit) #questo oggetto vciene creato dal summary di mfit contiene l'elemento surv
H.hat <- -log(my.fit$surv); # che ? proprio lo stimatore della funzione di kaplan mayer
H.hat <- c(H.hat, H.hat[length(H.hat)]) # a questo oggetto si aggiunge un ulteriore elemento per rappresentarlo graficamrente
plot(c(my.fit$time, my.fit$time[length(my.fit$time)]+1),H.hat,type="s") # e quindi si plotta
plot(mfit, fun="cumhaz") #oppure questa ? la funzione automatica
library(epicalc)
# load dataset
whas <- read.dta("whas2.dta",
convert.dates=TRUE, convert.factors=TRUE, missing.type=TRUE,
convert.underscore=TRUE, warn.missing.labels=TRUE)
use(whas)
# information on variables
des()
# descriptive statistics
summ()
#note the asymmetry of cpk variable
hist(whas$cpk)
# use log transformation
hist(log(whas$cpk))
# load library for survival analysis
library(survival)
# Create the survival data object
msurv<- Surv(lenfol, fstat == "Dead")
# descriptive analysis and Kaplan-Meier estimate
mfit <- survfit((msurv)~1)
options(survfit.print.mean = TRUE)
mfit
summary(mfit)
#Moltiplicando il valore precedente per la stima della probabilit? condizionata
# otteniamo il valore della stima incondizionata del blablabla (cazzo devi seguire)
# per vedere il tempo mediano di sopravvivenza vedo quando pi? o meno la funzione di sopravvivenza va al di sotto del valore di 0.5
# (nel nostro caso si tratta di 2335)
# Allo stesso modo per quanto riguarda il venticinquesimo percentile dobbiamo vedrre quello con 0.75 (ovver il 205)
# mentre quello del 75esimo non arriviamo a stimarlo in quanto ci fermiamo allo 0.38
plot(mfit)
###############################################################
######### Stima della funzione di rischio cumulata ############
###############################################################
# estimate the cumulative hazard function
my.fit <- summary(mfit) #questo oggetto vciene creato dal summary di mfit contiene l'elemento surv
H.hat <- -log(my.fit$surv); # che ? proprio lo stimatore della funzione di kaplan mayer
H.hat <- c(H.hat, H.hat[length(H.hat)]) # a questo oggetto si aggiunge un ulteriore elemento per rappresentarlo graficamrente
plot(c(my.fit$time, my.fit$time[length(my.fit$time)]+1),H.hat,type="s") # e quindi si plotta
plot(mfit, fun="cumhaz") #oppure questa ? la funzione automatica
plot(mfit)
summary(mfit)
mfit.bymiord<-survfit((msurv)~miord)
mfit.bymiord<-survfit((msurv)~miord)
plot(mfit.bymiord)
plot(mfit.bymiord, conf.int = TRUE, col = c("black", "red"), lty = 1:2)
plot(mfit.bymiord, fun="cloglog", col = c("black", "red"),
lty = 1:2)
survfit((msurv)~mitype)
library(readxl)
survival <- read_excel("D:/Box Sync/#UNI/Casi di Studio/Analisi/survival.xlsx")
library(epicalc)
library(survival)
View(survival)
?Surv
use(survival)
use(survival[,-24])
msurv<- Surv(`OVERALL SURVIVAL (mesi)`)
msurv
drop(survival)
use(survival[1:202,-24])
msurv<- Surv(`OVERALL SURVIVAL (mesi)`)
msurv
?survfit
mfit <- survfit((msurv)~1)
options(survfit.print.mean = TRUE)
summary(mfit)
plot(mfit)
plot(mfit, title = "Funzione di sopravvivenza")
plot(mfit, main = "Funzione di sopravvivenza")
plot(mfit, main = "Funzione di sopravvivenza", xlab = "Mesi dall'operazione", ylab = "Funzione di sopravvivenza")
plot(mfit, main = "Funzione di sopravvivenza", xlab = "Mesi dall'operazione")
my.fit = summary(mfit)
H.hat = -log(my.fit$surv)
plot(c(my.fit$time, my.fit$time[length(my.fit$time)]+1),H.hat,type="s") # e quindi si plotta
H.hat <- c(H.hat, H.hat[length(H.hat)]) # costruiamo una funzione di rischio cumulata
plot(mfit, fun="cumhaz") # funzione cumulata di azardo
plot(mfit, fun="cumhaz", main = "Funzione cumulativa del Rischio") # funzione cumulativa di azardo
plot(mfit, fun="cumhaz", main = "Funzione cumulativa del Rischio (-logS(t))") # funzione cumulativa di azardo
mfit.LNR = survfit(msurv ~ `LNR CLASSE`)
mfit.LNR = survfit(msurv ~ survival$`LNR CLASSE`)
mfit.LNR = survfit(msurv ~ `LNR CLASSE`)
mfit.LNR = survfit(msurv ~ LNR CLASSE)
mfit.LNR = survfit(msurv ~ `LNR CLASSE`)
"LNR CLASSE"
survival = survival[1:202,-24]
mfit.LNR = survfit((msurv) ~ survival$`LNR CLASSE`)
plot(mfit.LNR)
plot(mfit.LNR, col = c("red", "green","blue"))
plot(mfit.LNR, col = c("red", "purple", "blue"))
plot(mfit.LNR, col = c("red", "yellow", "blue"))
plot(mfit.LNR, col = c("red", "orange", "blue"))
plot(mfit.LNR, col = c("red", "brown", "blue"))
plot(mfit.LNR, col = c("red", "dark_green", "blue"))
plot(mfit.LNR, col = c("red", "green", "blue"))
mfit.LNR
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"), lty = 2)
legend(locator(1), legend=c("Classe 0","Classe 1", "Classe 2"))
legend(locator(1), legend=c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"))
legend(locator(1), legend=c("Classe 0","Classe 1", "Classe 2"), lty = 1:3)
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"))
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend(locator(1), legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"))
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend(locator(1), legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
title("Funzione di sopravvivenza per gruppi di LNR")
title("Funzione di sopravvivenza per gruppi di LNR")
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"))
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
title("Funzione di sopravvivenza per gruppi di LNR")
title("Funzione di sopravvivenza per gruppi di LNR")
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"))
title("Funzione di sopravvivenza per gruppi di LNR")
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
title("Funzione di sopravvivenza per gruppi di LNR")
windows()
title("Funzione di sopravvivenza per gruppi di LNR")
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"))
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Funzione di sopravvivenza per gruppi di LNR")
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Funzione di sopravvivenza per LNR")
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LNR")
mfit.LNR = survfit(msurv ~ survival$`LNR CLASSE`)
survdiff(msurv ~ survival$`LNR CLASSE`)
survdiff(msurv ~ survival$`LNR CLASSE`, rho = 0)
survdiff(msurv ~ survival$`LNR CLASSE`, rho = 1)
mfit.LODDS = survfit(msurv ~ survival$`LODDS CLASSE`)
mfit.LODDS
par(mfrow = c(1,2))
plot(mfit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LODDS")
plot(mfit.LODDS, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
msurv
plot(mfit, main = "Funzione di sopravvivenza", xlab = "Mesi dall'operazione")
plot(mfit, fun="cumhaz", main = "Funzione cumulativa del Rischio (-logS(t))") # funzione cumulativa di azardo
mfit <- survfit((msurv)~1)
summary(mfit)
mfit$n.event
sum(n.event)
sum(mfit$n.event)
msurv<- Surv(`OVERALL SURVIVAL (mesi)`, fstat == "Dead")
library(readxl)
survival <- read_excel("D:/Box Sync/#UNI/Casi di Studio/Analisi/survival.xlsx")
View(survival)
survival = survival[1:202]
survival = survival[1:202,]
View(survival)
use(survival)
msurv<- Surv(`OVERALL SURVIVAL (mesi)`, Morto == 1)
msurv
mfit <- survfit((msurv)~1)
options(survfit.print.mean = TRUE)
my.fit = summary(mfit)
plot(mfit, main = "Funzione di sopravvivenza", xlab = "Mesi dall'operazione")
plot(mfit, fun="cumhaz", main = "Funzione cumulativa del Rischio (-logS(t))") # funzione cumulativa di azardo
mfit.LNR = survfit(msurv ~ survival$`LNR CLASSE`)
mfit.LNR
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LNR")
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
survdiff(msurv ~ survival$`LNR CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
mfit.LODDS = survfit(msurv ~ survival$`LODDS CLASSE`)
mfit.LODDS
par(mfrow = c(1,2))
plot(mfit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LODDS")
plot(mfit.LODDS, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
survdiff(msurv ~ survival$`LNR CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
survdiff(msurv ~ survival$`LODDS CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
library(readxl)
survival <- read_excel("D:/Box Sync/#UNI/Casi di Studio/Analisi/survival.xlsx")
View(survival)
survival = survival[1:202, ]
library(epicalc)
library(survival)
