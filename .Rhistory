plot(mfit, fun="cumhaz") #oppure questa ? la funzione automatica
plot(mfit)
summary(mfit)
mfit.bymiord<-survfit((msurv)~miord)
mfit.bymiord<-survfit((msurv)~miord)
plot(mfit.bymiord)
plot(mfit.bymiord, conf.int = TRUE, col = c("black", "red"), lty = 1:2)
plot(mfit.bymiord, fun="cloglog", col = c("black", "red"),
lty = 1:2)
survfit((msurv)~mitype)
library(readxl)
survival <- read_excel("D:/Box Sync/#UNI/Casi di Studio/Analisi/survival.xlsx")
library(epicalc)
library(survival)
View(survival)
?Surv
use(survival)
use(survival[,-24])
msurv<- Surv(`OVERALL SURVIVAL (mesi)`)
msurv
drop(survival)
use(survival[1:202,-24])
msurv<- Surv(`OVERALL SURVIVAL (mesi)`)
msurv
?survfit
mfit <- survfit((msurv)~1)
options(survfit.print.mean = TRUE)
summary(mfit)
plot(mfit)
plot(mfit, title = "Funzione di sopravvivenza")
plot(mfit, main = "Funzione di sopravvivenza")
plot(mfit, main = "Funzione di sopravvivenza", xlab = "Mesi dall'operazione", ylab = "Funzione di sopravvivenza")
plot(mfit, main = "Funzione di sopravvivenza", xlab = "Mesi dall'operazione")
my.fit = summary(mfit)
H.hat = -log(my.fit$surv)
plot(c(my.fit$time, my.fit$time[length(my.fit$time)]+1),H.hat,type="s") # e quindi si plotta
H.hat <- c(H.hat, H.hat[length(H.hat)]) # costruiamo una funzione di rischio cumulata
plot(mfit, fun="cumhaz") # funzione cumulata di azardo
plot(mfit, fun="cumhaz", main = "Funzione cumulativa del Rischio") # funzione cumulativa di azardo
plot(mfit, fun="cumhaz", main = "Funzione cumulativa del Rischio (-logS(t))") # funzione cumulativa di azardo
mfit.LNR = survfit(msurv ~ `LNR CLASSE`)
mfit.LNR = survfit(msurv ~ survival$`LNR CLASSE`)
mfit.LNR = survfit(msurv ~ `LNR CLASSE`)
mfit.LNR = survfit(msurv ~ LNR CLASSE)
mfit.LNR = survfit(msurv ~ `LNR CLASSE`)
"LNR CLASSE"
survival = survival[1:202,-24]
mfit.LNR = survfit((msurv) ~ survival$`LNR CLASSE`)
plot(mfit.LNR)
plot(mfit.LNR, col = c("red", "green","blue"))
plot(mfit.LNR, col = c("red", "purple", "blue"))
plot(mfit.LNR, col = c("red", "yellow", "blue"))
plot(mfit.LNR, col = c("red", "orange", "blue"))
plot(mfit.LNR, col = c("red", "brown", "blue"))
plot(mfit.LNR, col = c("red", "dark_green", "blue"))
plot(mfit.LNR, col = c("red", "green", "blue"))
mfit.LNR
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"), lty = 2)
legend(locator(1), legend=c("Classe 0","Classe 1", "Classe 2"))
legend(locator(1), legend=c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"))
legend(locator(1), legend=c("Classe 0","Classe 1", "Classe 2"), lty = 1:3)
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"))
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend(locator(1), legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"))
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend(locator(1), legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
title("Funzione di sopravvivenza per gruppi di LNR")
title("Funzione di sopravvivenza per gruppi di LNR")
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"))
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
title("Funzione di sopravvivenza per gruppi di LNR")
title("Funzione di sopravvivenza per gruppi di LNR")
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"))
title("Funzione di sopravvivenza per gruppi di LNR")
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
title("Funzione di sopravvivenza per gruppi di LNR")
windows()
title("Funzione di sopravvivenza per gruppi di LNR")
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"))
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Funzione di sopravvivenza per gruppi di LNR")
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Funzione di sopravvivenza per LNR")
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LNR")
mfit.LNR = survfit(msurv ~ survival$`LNR CLASSE`)
survdiff(msurv ~ survival$`LNR CLASSE`)
survdiff(msurv ~ survival$`LNR CLASSE`, rho = 0)
survdiff(msurv ~ survival$`LNR CLASSE`, rho = 1)
mfit.LODDS = survfit(msurv ~ survival$`LODDS CLASSE`)
mfit.LODDS
par(mfrow = c(1,2))
plot(mfit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LODDS")
plot(mfit.LODDS, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
msurv
plot(mfit, main = "Funzione di sopravvivenza", xlab = "Mesi dall'operazione")
plot(mfit, fun="cumhaz", main = "Funzione cumulativa del Rischio (-logS(t))") # funzione cumulativa di azardo
mfit <- survfit((msurv)~1)
summary(mfit)
mfit$n.event
sum(n.event)
sum(mfit$n.event)
msurv<- Surv(`OVERALL SURVIVAL (mesi)`, fstat == "Dead")
library(readxl)
survival <- read_excel("D:/Box Sync/#UNI/Casi di Studio/Analisi/survival.xlsx")
View(survival)
survival = survival[1:202]
survival = survival[1:202,]
View(survival)
use(survival)
msurv<- Surv(`OVERALL SURVIVAL (mesi)`, Morto == 1)
msurv
mfit <- survfit((msurv)~1)
options(survfit.print.mean = TRUE)
my.fit = summary(mfit)
plot(mfit, main = "Funzione di sopravvivenza", xlab = "Mesi dall'operazione")
plot(mfit, fun="cumhaz", main = "Funzione cumulativa del Rischio (-logS(t))") # funzione cumulativa di azardo
mfit.LNR = survfit(msurv ~ survival$`LNR CLASSE`)
mfit.LNR
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LNR")
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
survdiff(msurv ~ survival$`LNR CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
mfit.LODDS = survfit(msurv ~ survival$`LODDS CLASSE`)
mfit.LODDS
par(mfrow = c(1,2))
plot(mfit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LODDS")
plot(mfit.LODDS, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(2,2,2))
survdiff(msurv ~ survival$`LNR CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
survdiff(msurv ~ survival$`LODDS CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
library(readxl)
survival <- read_excel("D:/Box Sync/#UNI/Casi di Studio/Analisi/survival.xlsx")
View(survival)
survival = survival[1:202, ]
library(epicalc)
library(survival)
# Creazione dell'oggetto survivial
use(survival)
###########################
#### OVERALL SURVIVAL #####
msurv<- Surv(`OVERALL SURVIVAL (mesi)`, Morto == 1)
mfit <- survfit((msurv)~1)
options(survfit.print.mean = TRUE)
my.fit = summary(mfit)
#### PLOT DELLA CURVA DELLA SOPRAVVIVENZA ####
plot(mfit, main = "Funzione di sopravvivenza", xlab = "Mesi dall'operazione")
### STIMA DELLA CUMULATIVE HAZARD FUNCTION ####
plot(mfit, fun="cumhaz", main = "Funzione cumulativa del Rischio (-logS(t))") # funzione cumulativa di azardo
#### ANALISI DELLE COVARIATE: LNR ####
#### Analisi della sopravvivenza
mfit.LNR = survfit(msurv ~ survival$`LNR CLASSE`)
mfit.LNR
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LNR")
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
#### Log Rank test
survdiff(msurv ~ survival$`LNR CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
#### ANALISI DELLE COVARIATE: LODDS ####
#### Analisi della sopravvivenza
mfit.LODDS = survfit(msurv ~ survival$`LODDS CLASSE`)
mfit.LODDS
par(mfrow = c(1,2))
plot(mfit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LODDS")
plot(mfit.LODDS, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
#### Log Rank test
survdiff(msurv ~ survival$`LODDS CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
survdiff(msurv ~ survival$`LODDS CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
library(epicalc)
library(survival)
###########################
#### OVERALL SURVIVAL #####
# Creazione dell'oggetto survivial
use(survival)
###########################
#### OVERALL SURVIVAL #####
msurv<- Surv(`OVERALL SURVIVAL (mesi)`, Morto == 1)
mfit <- survfit((msurv)~1)
options(survfit.print.mean = TRUE)
my.fit = summary(mfit)
#### PLOT DELLA CURVA DELLA SOPRAVVIVENZA ####
plot(mfit, main = "Funzione di sopravvivenza", xlab = "Mesi dall'operazione")
### STIMA DELLA CUMULATIVE HAZARD FUNCTION ####
plot(mfit, fun="cumhaz", main = "Funzione cumulativa del Rischio (-logS(t))") # funzione cumulativa di azardo
#### ANALISI DELLE COVARIATE: LNR ####
#### Analisi della sopravvivenza
mfit.LNR = survfit(msurv ~ survival$`LNR CLASSE`)
mfit.LNR
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LNR")
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
#### Log Rank test
survdiff(msurv ~ survival$`LNR CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
#### ANALISI DELLE COVARIATE: LODDS ####
#### Analisi della sopravvivenza
mfit.LODDS = survfit(msurv ~ survival$`LODDS CLASSE`)
mfit.LODDS
par(mfrow = c(1,2))
plot(mfit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LODDS")
plot(mfit.LODDS, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
#### Log Rank test
survdiff(msurv ~ survival$`LODDS CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
survdiff(msurv ~ survival$`LODDS CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
plot(mfit, main = "Funzione di sopravvivenza Disease-Free", xlab = "Mesi dall'operazione")
mfit.LNR = survfit(msurv ~ survival$`LNR CLASSE`)
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LNR")
plot(mfit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
msurv<- Surv(`OVERALL SURVIVAL (mesi)`, Morto == 1)
mfit <- survfit((msurv)~1)
mfit.LNR = survfit(msurv ~ survival$`LNR CLASSE`)
par(mfrow = c(1,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LNR")
msurv<- Surv(`DISEASE- FREE SURVIVAL (mesi)`, Morto == 1)
mfit.LNR = survfit(msurv ~ survival$`LNR CLASSE`)
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LNR")
disurv<- Surv(`DISEASE- FREE SURVIVAL (mesi)`, Morto == 1)
difit <- survfit((disurv)~1)
options(survfit.print.mean = TRUE)
my.fit = summary(difit)
#### PLOT DELLA CURVA DELLA SOPRAVVIVENZA ####
plot(difit, main = "Funzione di sopravvivenza Disease-Free", xlab = "Mesi dall'operazione")
### STIMA DELLA CUMULATIVE HAZARD FUNCTION ####
plot(difit, fun="cumhaz", main = "Funzione cumulativa del Rischio (-logS(t))") # funzione cumulativa di azardo
#### ANALISI DELLE COVARIATE: LNR ####
#### Analisi della sopravvivenza
difit.LNR = survfit(disurv ~ survival$`LNR CLASSE`)
difit.LNR
par(mfrow = c(1,2))
plot(difit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LNR")
plot(difit.LNR, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
#### Log Rank test
survdiff(disurv ~ survival$`LNR CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
#### ANALISI DELLE COVARIATE: LODDS ####
#### Analisi della sopravvivenza
difit.LODDS = survfit(disurv ~ survival$`LODDS CLASSE`)
difit.LODDS
par(mfrow = c(1,2))
plot(difit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LODDS")
plot(difit.LODDS, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
#### Log Rank test
survdiff(disurv ~ survival$`LODDS CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
par(mfrow = c(2,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza Totale per LNR")
plot(difit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza Disease Free per LNR")
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
plot(mfit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza Totale per LODDS")
plot(difit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza Disease Free per LODDS")
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
windows()
par(mfrow = c(2,2))
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza Totale per LNR")
plot(difit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza Disease Free per LNR")
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
plot(mfit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza Totale per LODDS")
plot(difit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza Disease Free per LODDS")
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
#### Analisi della sopravvivenza
mfit.LODDS = survfit(msurv ~ survival$`LODDS CLASSE`)
mfit.LODDS
par(mfrow = c(1,2))
plot(mfit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LODDS")
plot(mfit.LODDS, conf.int = TRUE, col = c("red", "green", "blue"))
legend("topright", legend = c("Classe 0","Classe 1", "Classe 2"), col = c("red", "green", "blue"), lty = c(1,1,1))
#### Log Rank test
survdiff(msurv ~ survival$`LODDS CLASSE`, rho = 0) # rifiutiamo l'hp che le curve di sopravvivenza sono uguali
par(mfrow = c(1,2))
plot(mfit.LODDS, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LODDS")
plot(mfit.LNR, conf.int = FALSE, col = c("red", "green", "blue"), main = "Sopravvivenza per LNR")
?coxph
mfit
msurv
mfit
model0 = coxph(mfit ~ ASA + >12)
model0 = coxph(mfit ~ ASA + survival$`>12` )
type(mfit)
class(mfir)
class(mfit)
model0 = coxph(msurv ~ ASA + survival$`>12` )
model0 = coxph(msurv ~ ASA + survival$`>12` + STADIO + Ric_N + `LNR CLASSE` + `LODDS CLASSE`)
summary(model0)
summary(model0)
summary(model0)
model1 =  coxph(msurv ~ ASA)
summary(model1)
msurv
is.factor(survival$`>12`)
as.factor(survival$`>12`)
model0 = coxph(msurv ~ ASA + as.factor(survival$`>12`) + STADIO + Ric_N + `LNR CLASSE` + `LODDS CLASSE`)
summary(model0)
modeldata = data.frame(NULL)
modeldata[,1] = as.factor(survival$`>12`)
modeldata[,"nLinf12"] = as.factor(survival$`>12`)
modeldata["nLinf12"] = as.factor(survival$`>12`)
modeldata = data.frame(NA)
modeldata["nLinf12"] = as.factor(survival$`>12`)
modeldata = data.frame(202, )
modeldata = data.frame(202, )
modeldata = data.frame(202)
modeldata
modeldata = NULL
modeldata["nLinf12"] = as.factor(survival$`>12`)
modeldata
as.factor(survival$`>12`)
modeldata[,"nLinf12"] = as.factor(survival$`>12`)
modeldata = as.data.frame(NULL)
modeldata[,"nLinf12"] = as.factor(survival$`>12`)
modeldata = as.data.frame(rep(0, 202))
modeldata
modeldata[,"nLinf12"] = as.factor(survival$`>12`)
modeldata
str(modeldata)
modeldata = as.data.frame(rep(0, 202))
modeldata[, "Asa"] = as.factor(survival$ASA)
modeldata[,"nLinf12"] = as.factor(survival$`>12`)
modeldata = as.data.frame(rep(0, 202))
modeldata[, "Asa"] = as.factor(survival$ASA)
modeldata[,"nLinf12"] = as.factor(survival$`>12`)
modeldata[, "stadio"] = as.factor(survival$STADIO)
modeldata[, "ricN"] = as.factor(survival$Ric_N)
modeldata[, "LNR"] = as.factor(survival$`LNR CLASSE`)
modeldata[, "LODDS"] = as.factor(survival$`LODDS CLASSE`)
str(modeldata)
modeldata = modeldata[,-1]
str(modeldata)
use(modeldata)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, data = modeldata)
model1 =  coxph(msurv ~ Asa)
summary(model0)
coxph(msurv ~ LNR)
coxph(msurv ~ LODDS)
coxph(msurv ~ LNR + LODDS)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + survival$`LODDS CLASSE`, data = modeldata)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + survival$`LODDS CLASSE`)
summary(model0)
View(modeldata)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + survival$`LODDS CLASSE`, iter.max = 12)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + as.factor(`LODDS CLASSE`), iter.max = 12)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + as.factor(survival$`LODDS CLASSE`), iter.max = 12)
model1 =  coxph(msurv ~ LODDS)
model1
model1 =  coxph(msurv ~ LODDS + LNR)
model1 =  lm(msurv ~ LODDS + LNR)
model1 =  coxph(msurv ~ LODDS + LNR)
model1
model1 =  coxph(msurv ~ LNR + LODDS)
model1
model1 =  coxph(msurv ~ LNR + Asa)
model1
msurv
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 12)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + LODDS + LNR + LODDS, iter.max = 12)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + LODDS + LNR + richN, iter.max = 12)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + LODDS + LNR + ricN, iter.max = 12)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + LODDS + LNR + as.character(richN), iter.max = 12)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + LODDS + LNR + as.character(ricN), iter.max = 12)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 12)
summary(model0)
model1 = coxph(msurv ~ Asa)
summary(coxph(msurv ~ Asa))
summary(coxph(msurv ~ Asa + nLinf12))
cor(modeldata)
summary(coxph(msurv ~ nLinf12))
summary(coxph(msurv ~ stadio))
summary(coxph(msurv ~ ric))
summary(coxph(msurv ~ ricN))
summary(coxph(msurv ~ ricN + Asa))
summary(coxph(msurv ~ ricN + nLinf12))
summary(coxph(msurv ~ ricN + stadio))
summary(coxph(msurv ~ ricN + ricN))
summary(coxph(msurv ~ ricN + LNR))
summary(coxph(msurv ~ LODDS + LNR))
summary(coxph(msurv ~ LNR + LODDS))
summary(coxph(msurv ~ LNR + as.factor(survival$`LNR CLASSE`)))
summary(coxph(msurv ~ LNR + as.factor(survival$`LODDS CLASSE`)))
summary(coxph(msurv ~ LNR + LODDS))
summary(coxph(msurv ~ LNR + as.factor(survival$`LODDS CLASSE`)))
summary(coxph(msurv ~ LNR + LODDS))
summary(coxph(msurv ~ LNR + as.factor(survival$`LODDS CLASSE`)))
msurv<- Surv(`OVERALL SURVIVAL (mesi)`, Morto == 1)
msurv<- Surv(survival$`OVERALL SURVIVAL (mesi)`, Morto == 1)
msurv<- Surv(survival$`OVERALL SURVIVAL (mesi)`, survival$Morto == 1)
modeldata = as.data.frame(rep(0, 202))
modeldata[, "Asa"] = factor(survival$ASA)
modeldata[,"nLinf12"] = factor(survival$`>12`)
modeldata[, "stadio"] = factor(survival$STADIO)
modeldata[, "ricN"] = factor(survival$Ric_N)
modeldata[, "LNR"] = factor(survival$`LNR CLASSE`)
modeldata[, "LODDS"] = factor(survival$`LODDS CLASSE`)
modeldata = modeldata[,-1]
str(modeldata)
use(modeldata)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 12)
summary(model0)
summary(coxph(msurv ~ ricN + LNR))
summary(coxph(msurv ~ LODDS + LNR))
summary(coxph(msurv ~ LNR + LODDS))
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 4)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 5)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 6)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 5)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 4)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 13)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 4)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 12)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 4)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 13)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 1)
summary(model0)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS, iter.max = 2)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS)
install.packages("survival")
install.packages("survival")
library(survival)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS)
use(modeldata)
library(epicalc)
use(modeldata)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS)
summary(model0)
table(msurv, LNR)
??cox
plot(cox.zph(cox.comp))    # invokes plot.cox.zph
plot(cox.zph(model0))
library(epicalc)
library(survival)
use(modeldata)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS)
plot(cox.zph(model0))
cox.zph(model0)
resid(model0, "scaledsch")
plot(resid(model0, "scaledsch"))
modeldata
msurv
length(msurv)
msurv
nrow(msurv)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS)
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN)
model0 = coxph(msurv ~ Asa)
asa
summary(coxph(msurv ~ ricN + LNR))
Asa
summary(coxph(msurv ~ ricN + LNR))
summary(coxph(msurv ~ LODDS + LNR))
summary(coxph(msurv ~ LODDS))
summary(coxph(msurv ~ LODDS + LNR))
model0 = coxph(msurv ~ Asa + nLinf12 + stadio + ricN + LNR + LODDS)
summary(coxph(msurv ~ LODDS + LNR))
summary(coxph(msurv ~ LODDS + LNR))
xtabs( ~ LODDS+LNR)
is.singular()
is.singular(xtabs( ~ LODDS+LNR))
det(xtabs( ~ LODDS+LNR))
det(xtabs( ~ LODDS+LNR))
?det
det(as.matrix(xtabs( ~ LODDS+LNR)))
str(xtabs( ~ LODDS+LNR))
library(matrixcalc)
install.packages("matrixcalc")
library(matrixcalc)
is.singular.matrix(xtabs( ~ LODDS+LNR))
is.singular.matrix(as.matrix(xtabs( ~ LODDS+LNR)))
summary(coxph(msurv ~ LODDS + LNR))
xtabs( ~ LODDS+LNR)
summary(coxph(msurv ~ ricN + LNR))
xtabs( ~ ricN + LNR)
summary(coxph(msurv ~ LNR + LODDS))
summary(coxph(msurv ~ LNR + LODDS))
xtabs( ~ LNR + LODDS)
summary(coxph(msurv ~ LODDS + LNR))
summary(coxph(msurv ~ LNR + LODDS))
summary(coxph(msurv ~ LODDS + LNR + LNR&LODDS))
summary(coxph(msurv ~ LODDS + LNR + LNR.LODDS))
is.singular.matrix(as.matrix(xtabs( ~ LODDS+LNR)))
i
xtabs( ~ LNR + LODDS + ricN)
